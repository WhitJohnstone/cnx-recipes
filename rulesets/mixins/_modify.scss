/// Moves any matching selector to the trash
/// @arg {String} $selector - A string of the selector that needs to be trashed
/// @group modify
@mixin modify_trash($selector) {
  #{$selector} {
    move-to: trash;
  }
}

/// Changes preface title's container to `<h1>`
/// @group modify
@mixin modify_titlePreface() {
  //This only changes a container
  //will this be needed once the headers in raw are changed?
  div.preface {
    > [data-type="document-title"] {
      container: h1;
      content: content();
    }
  }
}

/// Modifies the `id` of each chapter title to `"chapTitle" counter(chapTitleNum)`
/// @group modify
@mixin modify_chapterAutoID() {
  div[data-type='chapter'] {
    > h1[data-type='document-title'] {
      counter-increment: chapTitleNum;
      attr-id: "chapTitle" counter(chapTitleNum);
    }
  }
}

/// Trashes `[data-type="cnx-archive-uri"]` in `.os-eob` and `.os-eoc`
///Trashes `[data-type="cnx-archive-uri"]` in composite-chapters
/// @group modify
@mixin modify_suppressURI($hasCompositeChapter) {
  div.os-eoc,
  div.os-eob {
    [data-type="cnx-archive-uri"] {
      move-to: trash;
    }
  }
  @if $hasCompositeChapter {
    [data-type="composite-chapter"] {
      > [data-type="metadata"] > [data-type="cnx-archive-uri"] {
        move-to: trash;
      }
    }
  }
}


/// Wraps all `[data-type="document-title"]` (excluding in the metadata) in a span with the class `os-text`. This is done before numbering.
/// @group modify
@mixin modify_spanWrapTitles() {
  :not([data-type="metadata"]) > [data-type="document-title"] {
    content: '';
    &::after {
      content: content();
      container: span;
      class: "os-text";
    }
  }
}

/// Modifies all simulation links to open in a new browser window.
///
/// This is done only because TEA has asked for it.
/// This targets a class name because while some links point to
///   archive.cnx.org/specials, others point to PhET simulations at colorado.edu.
///
/// @group modify
@mixin modify_simLinkTarget() {
  a.os-interactive-link {
    attr-target: "_blank";
  }
}

/// Prepares index terms for grouping by the glossary. Modifies the `id` attribute of the term to include the `$pageIDString` and `$termCounter`
/// @arg {Text} $termCounter - The name of counter for terms
/// @arg {Text} $pageIDString - The page ID where the term is found
/// @group modify
@mixin modify_prepIndexTerms($termCounter, $pageIDString) {
  div[data-type="page"],
  div[data-type="composite-page"] {
    span[data-type="term"] {
      attr-id: "auto_" string($pageIDString) "_term" counter($termCounter);
      &:match("^[a-zA-Z]") {
        attr-group-by: first-letter(content());
      }
      &:match("^[^a-zA-Z]") {
        attr-group-by: "";
      }
    }
  }
}

/// Adds a title for the first index group. `ie. Symbols`
/// @arg {string} $location - The string of the location where title needs to be added
/// @arg {string} $name - The string of the title for this group
/// @group modify
@mixin modify_addIndexSymbolGroup($location, $name) {
  .os-#{$location}-container > div.group-by:first-of-type > span.group-label {
    content: $name;
  }
}
/// Adds metadata to the composite pages
/// @arg {Text} $bookMetadata - The node set that contains the metadata
/// @group modify
@mixin modify_compositeMetadata($bookMetadata, $hasCompositeChapter) {
  [data-type="composite-page"] {
    content: nodes($bookMetadata) content();
  }

  @if $hasCompositeChapter {
    [data-type="composite-chapter"]  {
      // Copy-pasta from above
      content: nodes($bookMetadata) content();
    }
  }
}

/// Adds the title for each composite page
/// @group modify
@mixin modify_retitleCompositeMetadata($hasCompositeChapter) {
  $pageAndCompositeChapterSel: ('[data-type="composite-page"]');
  @if $hasCompositeChapter {
    $pageAndCompositeChapterSel: append($pageAndCompositeChapterSel, '[data-type="composite-chapter"]', comma);
  }

  #{$pageAndCompositeChapterSel} {
    > [data-type="document-title"] {
      string-set: doc-title-TOMETADATA content();
    }
    > [data-type="metadata"] {
      > [data-type="document-title"] {
        content: string(doc-title-TOMETADATA);
      }
    }
  }
}

/// Modifies note feature to add a note title and optionally wrap the body content
/// @arg {map} $noteContent - map containing `$selector`, `$label` and `$isBodyWrapped`
/// @group modify

/// Modify the title of any container based on data-type and/or class. This is useful for oddball elements such as exercises used as notes.
@mixin modify_anyContainerTitle ($dataType, $selector) {
  div#{$dataType}#{$selector}  {
      >div[data-type="title"] {
        string-set: containerTitle content();
       &::before {
         container: span;
         class: "os-title-label";
         content: string(containerTitle) content();
         move-to: anyContainerLabel;
     }
     move-to: trash;
    }
    &::after {
      container: div;
      content: pending(anyContainerLabel);
      class: "os-title";
      move-to: anyContainer;
     }
     &:deferred {
      content: pending(anyContainer) content();
     }
  }
}

/// Modify GenericNote: Many notes have  different title, the only way to keep those was to pass noteTitle to the title. However, the titles are inconsistent. It might be better to define the title via variables like any other notes and fix the content.

@mixin modify_GenericNote() {
 div[data-type="note"][class="note"] {
    >div[data-type="title"] {
      string-set: noteTitle content();
      &::before {
       container: span;
       class: "os-title-label";
       content: string(noteTitle);
       move-to: genericNoteLabel;
     }
     move-to: trash;
    }
    &::after {
      container: div;
      content: pending(genericNoteLabel);
      class: "os-title";
      move-to: genericNote;
     }
     &:deferred {
      content: pending(genericNote) content();
     }
   }
}

@mixin modify_note($noteContent) {
  $selector: map-get($noteContent, selector);
  $labelText: map-get($noteContent, labelText);
  $isBodyWrapped: map-get($noteContent, isBodyWrapped);
  [data-type="note"].#{$selector} {
    &::before {
      container: span;
      class: "os-title-label";
      content: $labelText;
      move-to: bNoteLabel;
    }
    &::before {
      container: h3;
      content: pending(bNoteLabel);
      class: "os-title";
      move-to: bNoteHeader;
    }
    @if ($isBodyWrapped) {
      >div[data-type="title"] {
        class: "os-subtitle";
        container: h4;
        move-to: noteSubtitle;
     }
      &::inside {
          class: "os-note-body";
          content: pending(noteSubtitle) content();
      }
    }
    @else {
      >div[data-type="title"] {
       move-to: trash;
     }
    }
    &:deferred {
      content:pending(bNoteHeader)content();
    }
  }
}

/// NEEDS DOCUMENTATION
/// @group needs-docs
@mixin modify_retitleHeaders ($hasCompositeChapter) {
  [data-type="chapter"] {
    [data-type="page"] {
      [data-type="note"],
      [data-type="example"],
      [data-type="exercise"] {
        > .os-title {
          container: h3;
        }
        [data-type="solution"] {
          .solution-title {
          container: h4;
          }
        }
        .os-note-body > [data-type="title"] {
          class: "os-subtitle";
          container: h4;
        }
        [data-type="note"] {
          > .os-title {
            class: "os-title";
            container: h4;
          }
        }
      }
    }
  }
 [data-type="composite-page"] {
  &.os-eoc {
    > section {
        >[data-type="document-title"] {
        container: h3;
      }
    }
    > div > div > div > section {
      >[data-type="document-title"] {
        container: h4;
      }
    }
  }
  &.os-eob {
      >.os-chapter-area {
        >[data-type="document-title"] {
          container: h2;
        }
        >section {
          >[data-type="document-title"] {
            container: h3;
          }
        }
      }
    }
  }
  @if $hasCompositeChapter {
    [data-type="composite-chapter"] {
      > section,
      > [data-type="page"] {
        [data-type="document-title"], [data-type="title"] {
          container: h2;
        }
        > section {
          [data-type="document-title"], [data-type="title"] {
            container: h3;
            data-type: title;
          }
          > section {
              [data-type="document-title"], [data-type="title"] {
                container: h4;
            }
          }
        }
      }
    }
  }
  .appendix {
    > section {
       [data-type="title"], [data-type="document-title"]  {
          container: h2;
       }
       > section {
        [data-type="title"], [data-type="document-title"] {
          container: h3;
        }
      }
    }
  }
}

/// This moves the data-label attribute off of a list and into a new element so it is visible
/// @group modify
@mixin modify_wrapLists() {
  ol,
  ul {
    &[data-label]:not([data-label=""]) {
      // &::outside {
      //   tag-name-set: div;
      //   attrs-set: data-type list-container;
      //
      //   &::before {
      //     content: attr(data-label);
      //     class-add: os-label;
      //   }
      // }
      // The previous does not work. Instead, we have to do the following (& use a bucket)
      &::after {
        container: div;
        class: "os-label";
        content: attr(data-label);
        move-to: bListLabel;
      }
      &::outside {
        data-type: "list-container";
        container: div;
        content: pending(bListLabel) content();
      }

    }
  }
}

/// This moves the data-label attribute off of an exercise and into a new element so it is visible
/// @group modify
@mixin modify_wrapExercises() {
  [data-type="exercise"] {
    &[data-label]:not([data-label=""]) {
      // &::outside {
      //   tag-name-set: div;
      //   attrs-set: data-type list-container;
      //
      //   &::before {
      //     content: attr(data-label);
      //     class-add: os-label;
      //   }
      // }
      // The previous does not work. Instead, we have to do the following (& use a bucket)
      &::after {
        container: div;
        class: "os-label";
        content: attr(data-label);
        move-to: bTitleLabel;
      }
      &::outside {
        data-type: "exercise-container";
        container: div;
        content: pending(bTitleLabel) content();
      }

    }
  }
}

/// This wraps every iframe with an element that has classes on it
/// saying which alternatives are present,
/// and adds a link that opens in a new window.
/// @group modify
@mixin modify_wrapIframesWithAlternatives() {
  // just a guard to make sure we did not already convert the iframe
  :not([data-type="alternatives"]) {
    // > iframe {
    //   class-add: os-is-iframe;
    //   &::outside {
    //     tag-name-set: "div";
    //     attrs-set: data-type "alternatives";
    //     class-add: "os-has-iframe" "os-has-link";
    //
    //     &::before {
    //       tag-name-set: "a";
    //       attrs-set: href attr(src), target "_window";
    //       class-add: "os-is-link";
    //       content: "link";
    //     }
    //   }
    // }
    //
    // The previous does not work. Instead, we have to do the following (& use a bucket)
    > iframe {
      class: attr(class) "os-is-iframe";
      &::after {
        container: a;
        class: "os-is-link";
        attr-target: "_window";
        attr-href: attr(src);
        content: "Click to view content";
        move-to: bIframeLink;
      }
      &::outside {
        container: div;
        data-type: "alternatives";
        class: "os-has-iframe os-has-link";
        content: pending(bIframeLink) content();
      }

    }
  }
}


@mixin modify_addUnnumbered ($sourceSelector, $element) {
  @if $element {
    #{$sourceSelector} {
      #{$element}:not(.unnumbered) {
        class: attr(class) " unnumbered";
      }
    }
  } @else {
    #{$sourceSelector}:not(.unnumbered) {
      class: attr(class) " unnumbered";
    }
  }
}
